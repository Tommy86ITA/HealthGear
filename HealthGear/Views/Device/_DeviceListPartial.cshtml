@using HealthGear.Helpers
@using X.PagedList.Mvc.Core
@model HealthGear.Models.DeviceListViewModel

<!-- Tabella dei dispositivi -->
<table class="table table-striped table-bordered text-center">
    <thead class="thead-dark">
        <tr>
            <th><i class="fas fa-folder-open"></i> Inv.</th>
            <th><i class="fas fa-tag"></i> Nome</th>
            <th><i class="fas fa-industry"></i> Produttore</th>
            <th><i class="fas fa-barcode"></i> Modello</th>
            <th><i class="fas fa-wrench"></i> Manutenzione</th>
            <th class="text-center"><i class="fas fa-bolt"></i> Verifica Elettrica</th>
            <th class="text-center"><i class="fas fa-radiation"></i> Controllo Fisico</th>
            <th class="text-center"><i class="fas fa-cogs"></i> Azioni</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var device in Model.StatusFilter == "attivi" ? Model.ActiveDevices : Model.ArchivedDevices)
        {
            <tr id="device-row-@device.Id" data-has-interventions="@(device.Interventions.Any().ToString().ToLower())">
                <td class="text-center">@device.InventoryNumber</td>
                <td class="text-start">@device.Name</td>
                <td class="text-start">@device.Brand</td>
                <td class="text-start">@device.Model</td>
                <td class="text-center">
                    <span class="@(DueDateHelper.GetDueDateClass(device.NextMaintenanceDue))">
                        @(device.NextMaintenanceDue?.ToShortDateString() ?? "N/A")
                    </span>
                </td>
                <td class="text-center">
                    <span class="@(DueDateHelper.GetDueDateClass(device.NextElectricalTestDue))">
                        @(device.NextElectricalTestDue?.ToShortDateString() ?? "N/A")
                    </span>
                </td>
                <td class="text-center">
                    @if (device.RequiresPhysicalInspection)
                    {
                        <span class="@(DueDateHelper.GetDueDateClass(device.NextPhysicalInspectionDue))">
                            @(device.NextPhysicalInspectionDue?.ToShortDateString() ?? "N/A")
                        </span>
                    }
                    else
                    {
                        <span>â€”</span>
                    }
                </td>
                <td class="text-center">
                    <a asp-action="Details" asp-route-id="@device.Id" class="btn btn-info btn-sm" title="Dettagli">
                        <i class="fas fa-eye"></i>
                    </a>
                    <a asp-action="Edit" asp-route-id="@device.Id" class="btn btn-warning btn-sm" title="Modifica">
                        <i class="fas fa-edit"></i>
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Controllo di paginazione -->
@if (Model.StatusFilter == "attivi")
{
    <div class="d-flex justify-content-center">
        @Html.PagedListPager(Model.ActiveDevices, page =>
            Url.Action("Index", new { pageAttivi = page, statusFilter = "attivi", searchQuery = ViewBag.SearchQuery, dueDateFilter = ViewBag.DueDateFilter }),
            new PagedListRenderOptions
            {
                DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToNextPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded,
                UlElementClasses = new[] { "pagination", "justify-content-center" },
                LiElementClasses = new[] { "page-item" },
                PageClasses = new[] { "page-link" }
            })
    </div>
}
else if (Model.StatusFilter == "dismessi")
{
    <div class="d-flex justify-content-center">
        @Html.PagedListPager(Model.ArchivedDevices, page =>
            Url.Action("Index", new { pageDismessi = page, statusFilter = "dismessi", searchQuery = ViewBag.SearchQuery, dueDateFilter = ViewBag.DueDateFilter }),
            new PagedListRenderOptions
            {
                DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToNextPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded,
                UlElementClasses = new[] { "pagination", "justify-content-center" },
                LiElementClasses = new[] { "page-item" },
                PageClasses = new[] { "page-link" }
            })
    </div>
}