@using HealthGear.Helpers
@model Device

@if (TempData["SuccessMessage"] != null)
{
    <div id="tempDataMessage" class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
    TempData.Remove("SuccessMessage");
}

<h2 class="mb-4"><i class="fas fa-info-circle"></i> Dettagli Dispositivo</h2>

<!-- ðŸ“Œ Dati Generali -->
<div class="d-flex justify-content-between align-items-center mb-3">
    <h4><i class="fas fa-box"></i> Dati Generali</h4>
    <span class="badge bg-@(Model.Status switch
                          {
                              DeviceStatus.Attivo => "success",
                              DeviceStatus.Guasto => "danger",
                              _ => "secondary"
                          })"
          style="font-size: 1.2em; padding: 0.5em 1em;">
        @Model.Status.ToString()
    </span>
</div>

<hr>
<table class="table">
    <tr>
        <th><i class="fas fa-tag"></i> Nome</th>
        <td class="text-end">@Model.Name</td>
    </tr>
    <tr>
        <th><i class="fas fa-industry"></i> Produttore</th>
        <td class="text-end">@Model.Brand</td>
    </tr>
    <tr>
        <th><i class="fas fa-barcode"></i> Modello</th>
        <td class="text-end">@Model.Model</td>
    </tr>
    <tr>
        <th><i class="fas fa-hashtag"></i> Numero di Serie</th>
        <td class="text-end">@Model.SerialNumber</td>
    </tr>
    <tr>
        <th><i class="fas fa-calendar-check"></i> Data collaudo</th>
        <td class="text-end">@Model.DataCollaudo.ToString("dd/MM/yyyy")</td>
    </tr>
</table>

<!-- ðŸ“Œ Manutenzione e Controlli -->
<h4 class="mt-5"><i class="fas fa-tools"></i> Manutenzione e Controlli</h4>
<hr>
<table class="table">
    <tr>
        <th><i class="fas fa-wrench"></i> Prossima Manutenzione</th>
        <td class="text-end @DueDateHelper.GetDueDateClass(Model.NextMaintenanceDue)">
            @DueDateHelper.GetDueDateText(Model.NextMaintenanceDue)
        </td>
    </tr>
    <tr>
        <th><i class="fas fa-bolt"></i> Prossima Verifica Elettrica</th>
        <td class="text-end @DueDateHelper.GetDueDateClass(Model.NextElectricalTestDue)">
            @DueDateHelper.GetDueDateText(Model.NextElectricalTestDue)
        </td>
    </tr>
    @if (Model.RequiresPhysicalInspection)
    {
        <tr>
            <th><i class="fas fa-radiation"></i> Prossima Verifica Fisica</th>
            <td class="text-end @DueDateHelper.GetDueDateClass(Model.NextPhysicalInspectionDue)">
                @DueDateHelper.GetDueDateText(Model.NextPhysicalInspectionDue)
            </td>
        </tr>
    }
</table>

<!-- ðŸ“Œ Storico Interventi -->
<h4 class="mt-5"><i class="fas fa-history"></i> Interventi Recenti</h4>
<hr>
<a asp-action="Create" asp-controller="Intervention" asp-route-deviceId="@Model.Id" class="btn btn-success mb-3">
    <i class="fas fa-plus"></i> Aggiungi Intervento
</a>

@if (Model.Interventions.Any())
{
    <table class="table table-striped table-bordered text-center shadow-sm">
        <thead>
        <tr>
            <th>Data</th>
            <th>Tipo</th>
            <th>Note</th>
            <th>Esito</th>
            <th>Azioni</th> <!-- âœ… Pulsanti azioni -->
        </tr>
        </thead>
        <tbody>
        @foreach (var intervention in Model.Interventions.OrderByDescending(i => i.Date).Take(5))
        {
            <tr>
                <td>@intervention.Date.ToShortDateString()</td>
                <td>
                    <i class="@(intervention.Type switch
                              {
                                  InterventionType.Maintenance => "fas fa-wrench",
                                  InterventionType.ElectricalTest => "fas fa-bolt",
                                  _ => "fas fa-radiation"
                              })"></i>
                    @InterventionHelper.GetInterventionDisplayName(intervention)
                </td>
                <td>@(string.IsNullOrWhiteSpace(intervention.Notes) ? "<span class='text-muted'>Nessuna nota</span>" : intervention.Notes)</td>
                <td>
                    @if (intervention.Type == InterventionType.Maintenance)
                    {
                        <span class="text-muted">N/A</span>
                    }
                    else if (intervention.Passed.HasValue)
                    {
                        <span class="badge @(intervention.Passed.Value ? "bg-success" : "bg-danger")">
                            @(intervention.Passed.Value ? "Superato" : "Non Superato")
                        </span>
                    }
                    else
                    {
                        <span class="text-muted">N/A</span>
                    }
                </td>
                <td class="text-center">
                    <!-- âœ… Pulsante per vedere i dettagli dell'intervento -->
                    <a asp-action="Details" asp-controller="Intervention" asp-route-id="@intervention.Id"
                       class="btn btn-info btn-sm" title="Dettagli">
                        <i class="fas fa-eye"></i>
                    </a>

                    <!-- âœ… Pulsante per modificare l'intervento -->
                    <a asp-action="Edit" asp-controller="Intervention" asp-route-id="@intervention.Id"
                       class="btn btn-warning btn-sm" title="Modifica">
                        <i class="fas fa-edit"></i>
                    </a>

                    <!-- âœ… Pulsante per eliminare l'intervento -->
                    <form asp-action="Delete" asp-controller="Intervention" asp-route-id="@intervention.Id"
                          method="post" class="d-inline">
                        <input type="hidden" name="returnUrl" value="@Url.Action("Details", "Device", new { id = Model.Id })"/>
                        <button type="submit" class="btn btn-danger btn-sm"
                                onclick="return confirm('Sei sicuro di voler eliminare questo intervento?');" title="Elimina">
                            <i class="fas fa-trash"></i>
                        </button>
                    </form>
                </td>
            </tr>
        }
        </tbody>
    </table>
}
else
{
    <p class="text-muted">Nessun intervento registrato per questo dispositivo.</p>
}

<!-- ðŸ“Œ Pulsanti di Azione -->
<div class="d-flex justify-content-between mt-4">
    <div>
        <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-warning">
            <i class="fas fa-edit"></i> Modifica Dispositivo
        </a>
        <a asp-action="Index" class="btn btn-secondary">
            <i class="fas fa-arrow-left"></i> Torna all'elenco
        </a>
    </div>

    <div>
        <!-- âœ… Pulsante di eliminazione visibile solo se non ci sono interventi -->

        <button class="btn btn-danger" data-bs-toggle="modal" data-bs-target="#deleteConfirmModal"
                @(Model.Interventions.Any() ? "hidden" : "")>
            <i class="fas fa-trash"></i> Elimina Dispositivo
        </button>

        <!-- âœ… Pulsante di archiviazione dinamico -->
        <form asp-action="Archive" asp-controller="Device" asp-route-id="@Model.Id" method="post" class="d-inline">
            <button type="submit" class="btn @(Model.Status == DeviceStatus.Dismesso ? "btn-success" : "btn-dark")">
                <i class="fas @(Model.Status == DeviceStatus.Dismesso ? "fas fa-undo" : "fa-archive")"></i>
                @(Model.Status == DeviceStatus.Dismesso ? "Riattiva Dispositivo" : "Archivia Dispositivo")
            </button>
        </form>
    </div>
</div>

<!-- ðŸ“Œ Modal di conferma per Archiviazione/Riattivazione -->
<div class="modal fade" id="confirmArchiveModal" tabindex="-1" aria-labelledby="confirmArchiveModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="confirmArchiveModalLabel">Conferma Operazione</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p id="archiveModalMessage">Sei sicuro di voler archiviare questo dispositivo?</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <button type="button" class="btn btn-primary" id="confirmArchiveBtn">Conferma</button>
            </div>
        </div>
    </div>
</div>

<!-- ðŸ“Œ Pulsanti Extra -->
<div class="text-center mt-3">
    <a asp-action="List" asp-controller="InterventionHistory" asp-route-deviceId="@Model.Id" class="btn btn-info">
        <i class="fas fa-clock-rotate-left"></i> Apri Storico Completo
    </a>
    <button class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exportReportModal">
        <i class="fas fa-file-download"></i> Scarica Report
    </button>
</div>

<!-- ðŸ“Œ MODAL PER LA SCELTA DEL FORMATO DEL REPORT -->
<div class="modal fade" id="exportReportModal" tabindex="-1" aria-labelledby="exportReportModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="exportReportModalLabel">Esporta Report</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Seleziona il formato in cui desideri esportare il report:</p>
                <div class="d-grid gap-2">
                    <button class="btn btn-primary" id="exportPdfBtn"><i class="fas fa-file-pdf"></i> Esporta come PDF</button>
                    <button class="btn btn-success" id="exportExcelBtn"><i class="fas fa-file-excel"></i> Esporta come Excel</button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- ðŸ“Œ MODAL PER CONFERMA ELIMINAZIONE -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel"
     aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Conferma Eliminazione</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p><strong>Stai per eliminare il seguente dispositivo:</strong></p>
                <ul>
                    <li><strong>Nome:</strong> @Model.Name</li>
                    <li><strong>Marca:</strong> @Model.Brand</li>
                    <li><strong>Modello:</strong> @Model.Model</li>
                    <li><strong>Numero di Serie:</strong> @Model.SerialNumber</li>
                </ul>
                <p>Digita il nome del dispositivo per confermare:</p>
                <input type="text" id="confirmDeviceName" class="form-control" placeholder="Nome dispositivo">
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>
                <form id="deleteForm" method="post" action="@Url.Action("Delete", "Device", new { id = Model.Id })">
                    @Html.AntiForgeryToken()
                    <input type="hidden" id="hiddenConfirmName" name="confirmName" value="">
                    <button type="submit" class="btn btn-danger" id="confirmDeleteBtn" disabled>
                        <i class="fas fa-trash"></i> Conferma Eliminazione
                    </button>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
            let token = tokenElement ? tokenElement.value : "";

            // âœ… FUNZIONE PER MOSTRARE UN TOAST DI NOTIFICA
            function showToast(message, type = "success") {
                let toastContainer = document.getElementById("toastContainer");
                if (!toastContainer) {
                    toastContainer = document.createElement("div");
                    toastContainer.id = "toastContainer";
                    toastContainer.style.position = "fixed";
                    toastContainer.style.top = "20px";
                    toastContainer.style.right = "20px";
                    toastContainer.style.zIndex = "1050";
                    document.body.appendChild(toastContainer);
                }

                let toast = document.createElement("div");
                toast.className = `toast align-items-center text-bg-${type} border-0 show`;
                toast.setAttribute("role", "alert");
                toast.setAttribute("aria-live", "assertive");
                toast.setAttribute("aria-atomic", "true");
                toast.innerHTML = `
                    <div class="d-flex">
                        <div class="toast-body">${message}</div>
                        <button type="button" class="btn-close me-2 m-auto" data-bs-dismiss="toast"></button>
                    </div>
                `;

                toastContainer.appendChild(toast);
                setTimeout(() => {
                    toast.classList.remove("show");
                    toastContainer.removeChild(toast);
                }, 3000);
            }

            // âœ… FUNZIONE GENERICA PER RICHIESTE FETCH
            function fetchRequest(url, method, body, successMessage, errorMessage, callback = null) {
                fetch(url, {
                    method,
                    headers: {
                        "Content-Type": "application/json",
                        "RequestVerificationToken": token
                    },
                    body: body ? JSON.stringify(body) : null
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        showToast(successMessage, "success");
                        if (callback) callback(data);
                    } else {
                        showToast(data.message || errorMessage, "danger");
                    }
                })
                .catch(error => showToast(errorMessage + ": " + error.message, "danger"));
            }

            // âœ… **GESTIONE ELIMINAZIONE DISPOSITIVO SENZA AJAX**
            let confirmInput = document.getElementById("confirmDeviceName");
            let deleteBtn = document.getElementById("confirmDeleteBtn");
            let hiddenConfirmName = document.getElementById("hiddenConfirmName");
            let deleteForm = document.getElementById("deleteForm");

            let expectedName = "@Html.Raw(Model.Name)".trim(); // Nome corretto

            if (confirmInput && deleteBtn) {
                confirmInput.addEventListener("input", function () {
                    let userInput = this.value.trim();
                    deleteBtn.disabled = userInput !== expectedName;
                    hiddenConfirmName.value = userInput === expectedName ? userInput : "";
                });
            }

            // âœ… GESTIONE ARCHIVIAZIONE / RIATTIVAZIONE DISPOSITIVO
            let archiveBtn = document.getElementById("archiveDeviceBtn");
            let confirmArchiveBtn = document.getElementById("confirmArchiveBtn");
            let archiveModalMessage = document.getElementById("archiveModalMessage");
            let confirmArchiveModal = new bootstrap.Modal(document.getElementById("confirmArchiveModal"));

            if (archiveBtn) {
                archiveBtn.addEventListener("click", function () {
                    let deviceId = this.getAttribute("data-id");
                    let isArchiving = archiveBtn.classList.contains("btn-dark");

                    archiveModalMessage.textContent = isArchiving
                        ? "Sei sicuro di voler archiviare questo dispositivo?"
                        : "Sei sicuro di voler riattivare questo dispositivo?";

                    confirmArchiveBtn.dataset.deviceId = deviceId;
                    confirmArchiveModal.show();
                });

                confirmArchiveBtn.addEventListener("click", function () {
                    let deviceId = this.dataset.deviceId;

                    fetch(`/Device/Archive/${deviceId}`, {
                        method: "POST",
                        headers: {
                            "Content-Type": "application/json",
                            "RequestVerificationToken": token
                        }
                    })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            showToast(data.message, "success");

                            // âœ… Cambia dinamicamente il pulsante senza ricaricare
                            if (data.newStatus === "Attivo") {
                                archiveBtn.classList.remove("btn-dark");
                                archiveBtn.classList.add("btn-success");
                                archiveBtn.innerHTML = '<i class="fas fa-undo"></i> Riattiva Dispositivo';
                            } else {
                                archiveBtn.classList.remove("btn-success");
                                archiveBtn.classList.add("btn-dark");
                                archiveBtn.innerHTML = '<i class="fas fa-archive"></i> Archivia Dispositivo';
                            }

                            confirmArchiveModal.hide();

                            // âœ… FORZA IL REFRESH DOPO L'AGGIORNAMENTO
                            setTimeout(() => {
                                window.location.reload();
                            }, 500);
                        } else {
                            showToast(data.message || "Errore durante l'operazione.", "danger");
                        }
                    })
                    .catch(error => showToast("Errore: " + error.message, "danger"));
                });
            }

            // âœ… CHIUSURA AUTOMATICA DEL MODALE DOPO IL DOWNLOAD DEL REPORT
            let reportModal = document.getElementById('deviceReportModal');
            if (reportModal) {
                let reportModalInstance = new bootstrap.Modal(reportModal);
                document.querySelectorAll("#deviceReportModal a").forEach(button => {
                    button.addEventListener("click", function () {
                        setTimeout(() => {
                            reportModalInstance.hide();
                        }, 500);
                    });
                });
            }
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
            let exportPdfBtn = document.getElementById("exportPdfBtn");
            let exportExcelBtn = document.getElementById("exportExcelBtn");
            let exportReportModal = new bootstrap.Modal(document.getElementById("exportReportModal"));

            function downloadReport(format) {
                let deviceId = "@Model.Id";
                let url = format === "pdf"
                    ? `/Report/GenerateDeviceDetailPdf/${deviceId}`
                    : `/Report/GenerateDeviceDetailExcel/${deviceId}`;

                window.location.href = url;
                exportReportModal.hide();
            }

            exportPdfBtn.addEventListener("click", function () {
                downloadReport("pdf");
            });

            exportExcelBtn.addEventListener("click", function () {
                downloadReport("excel");
            });
        });
    </script>
}