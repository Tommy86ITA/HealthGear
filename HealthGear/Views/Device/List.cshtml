@using HealthGear.Helpers
@using X.PagedList.Mvc.Core
@model HealthGear.Models.DeviceListViewModel

@{
    ViewData["Title"] = "Elenco Dispositivi";
}

<h2 class="mb-4"><i class="fas fa-clipboard-list"></i> Elenco Dispositivi</h2>

<!-- Pulsante per creare un nuovo dispositivo -->
<a asp-action="Create" class="btn btn-success mb-3">
    <i class="fas fa-plus"></i> Aggiungi Dispositivo
</a>

<!-- Pulsante per scaricare il report -->
<button type="button" class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#reportModal">
    <i class="fas fa-file-download"></i> Scarica Report
</button>

<!-- Form per la ricerca e filtro per le scadenze -->
<form method="get" class="mb-3">
    <div class="input-group">
        <input type="text" name="searchQuery" class="form-control" placeholder="Cerca dispositivo..." value="@ViewBag.SearchQuery" />
        <select name="dueDateFilter" class="form-select">
            @{
                var filter = ViewBag.DueDateFilter as string ?? "all";
                switch(filter)
                {
                    case "expired":
                        {
                            <option value="all">Tutti</option>
                            <option value="expired" selected="selected">Scaduti</option>
                            <option value="soon">In Scadenza</option>
                            <option value="ok">Regolari</option>
                            break;
                        }
                    case "soon":
                        {
                            <option value="all">Tutti</option>
                            <option value="expired">Scaduti</option>
                            <option value="soon" selected="selected">In Scadenza</option>
                            <option value="ok">Regolari</option>
                            break;
                        }
                    case "ok":
                        {
                            <option value="all">Tutti</option>
                            <option value="expired">Scaduti</option>
                            <option value="soon">In Scadenza</option>
                            <option value="ok" selected="selected">Regolari</option>
                            break;
                        }
                    default:
                        {
                            <option value="all" selected="selected">Tutti</option>
                            <option value="expired">Scaduti</option>
                            <option value="soon">In Scadenza</option>
                            <option value="ok">Regolari</option>
                            break;
                        }
                }
            }
        </select>
        <button type="submit" class="btn btn-primary">
            <i class="fas fa-filter"></i> Filtra
        </button>
        @if (!string.IsNullOrEmpty(ViewBag.SearchQuery) || (ViewBag.DueDateFilter as string) != "all")
        {
            <a href="@Url.Action("Index", "Device")" class="btn btn-secondary">
                <i class="fas fa-times"></i> Reset
            </a>
        }
    </div>
</form>

<!-- Modal per la generazione del report -->
<div class="modal fade" id="reportModal" tabindex="-1" aria-labelledby="reportModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="reportModalLabel">
                    <i class="fas fa-file-alt"></i> Scarica Report Dispositivi
                </h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Chiudi"></button>
            </div>
            <div class="modal-body">
                <p>Seleziona i dispositivi da includere nel report:</p>
                @* Utilizziamo un blocco switch per generare le option in modo elegante *@
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="reportFilter" id="allDevices" value="all" checked />
                    <label class="form-check-label" for="allDevices">Tutti i dispositivi</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="reportFilter" id="activeDevices" value="attivi" />
                    <label class="form-check-label" for="activeDevices">Solo dispositivi attivi</label>
                </div>
                <div class="form-check">
                    <input class="form-check-input" type="radio" name="reportFilter" id="archivedDevices" value="dismessi" />
                    <label class="form-check-label" for="archivedDevices">Solo dispositivi dismessi</label>
                </div>
                <hr />
                <p>Seleziona il formato del report:</p>
                <div class="d-flex justify-content-center gap-3">
                    <button type="button" class="btn btn-success" id="exportExcel">
                        <i class="fas fa-file-excel"></i> Excel
                    </button>
                    <button type="button" class="btn btn-danger" id="exportPdf">
                        <i class="fas fa-file-pdf"></i> PDF
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@Html.AntiForgeryToken()

<!-- Tabs per dispositivi attivi e dismessi -->
<ul class="nav nav-tabs">
    <li class="nav-item">
        <a class="nav-link @(Model.StatusFilter == "attivi" ? "active" : "")" asp-action="Index" asp-route-statusFilter="attivi">
            Attivi (@Model.ActiveDevices.TotalItemCount)
        </a>
    </li>
    <li class="nav-item">
        <a class="nav-link @(Model.StatusFilter == "dismessi" ? "active" : "")" asp-action="Index" asp-route-statusFilter="dismessi">
            Dismessi (@Model.ArchivedDevices.TotalItemCount)
        </a>
    </li>
</ul>

@if (Model.StatusFilter == "attivi")
{
    <h4><i class="fas fa-clipboard"></i> Dispositivi Attivi</h4>
}
else
{
    <h4><i class="fas fa-archive"></i> Dispositivi Dismessi</h4>
}

<!-- Tabella dei dispositivi -->
<table class="table table-striped table-bordered text-center">
    <thead class="thead-dark">
        <tr>
            <th><i class="fas fa-folder-open"></i> Inv.</th>
            <th><i class="fas fa-tag"></i> Nome</th>
            <th><i class="fas fa-industry"></i> Produttore</th>
            <th><i class="fas fa-barcode"></i> Modello</th>
            <th><i class="fas fa-wrench"></i> Manutenzione</th>
            <th class="text-center"><i class="fas fa-bolt"></i> Verifica Elettrica</th>
            <th class="text-center"><i class="fas fa-radiation"></i> Controllo Fisico</th>
            <th class="text-center"><i class="fas fa-cogs"></i> Azioni</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var device in Model.StatusFilter == "attivi" ? Model.ActiveDevices : Model.ArchivedDevices)
        {
            <tr id="device-row-@device.Id" data-has-interventions="@(device.Interventions.Any().ToString().ToLower())">
                <td class="text-center">@device.InventoryNumber</td>
                <td class="text-start">@device.Name</td>
                <td class="text-start">@device.Brand</td>
                <td class="text-start">@device.Model</td>
                <td class="text-center">
                    <span class="@(DueDateHelper.GetDueDateClass(device.NextMaintenanceDue))">
                        @(device.NextMaintenanceDue?.ToShortDateString() ?? "N/A")
                    </span>
                </td>
                <td class="text-center">
                    <span class="@(DueDateHelper.GetDueDateClass(device.NextElectricalTestDue))">
                        @(device.NextElectricalTestDue?.ToShortDateString() ?? "N/A")
                    </span>
                </td>
                <td class="text-center">
                    @if (device.RequiresPhysicalInspection)
                    {
                        <span class="@(DueDateHelper.GetDueDateClass(device.NextPhysicalInspectionDue))">
                            @(device.NextPhysicalInspectionDue?.ToShortDateString() ?? "N/A")
                        </span>
                    }
                    else
                    {
                        <span>—</span>
                    }
                </td>
                <td class="text-center">
                    <a asp-action="Details" asp-route-id="@device.Id" class="btn btn-info btn-sm" title="Dettagli">
                        <i class="fas fa-eye"></i>
                    </a>
                    <a asp-action="Edit" asp-route-id="@device.Id" class="btn btn-warning btn-sm" title="Modifica">
                        <i class="fas fa-edit"></i>
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

<!-- Paginazione: mostra solo la paginazione per la tabella attiva se lo stato corrente è "attivi", altrimenti per dismessi -->
@if (Model.StatusFilter == "attivi")
{
    <div class="d-flex justify-content-center">
        @Html.PagedListPager(Model.ActiveDevices, page => 
                Url.Action("Index", new { pageAttivi = page, statusFilter = "attivi", searchQuery = ViewBag.SearchQuery, dueDateFilter = ViewBag.DueDateFilter }),
            new PagedListRenderOptions
            {
                DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToNextPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded,
                UlElementClasses = ["pagination", "justify-content-center"],
                LiElementClasses = ["page-item"],
                PageClasses = ["page-link"]
            })
    </div>
}
else if (Model.StatusFilter == "dismessi")
{
    <div class="d-flex justify-content-center">
        @Html.PagedListPager(Model.ArchivedDevices, page => 
                Url.Action("Index", new { pageDismessi = page, statusFilter = "dismessi", searchQuery = ViewBag.SearchQuery, dueDateFilter = ViewBag.DueDateFilter }),
            new PagedListRenderOptions
            {
                DisplayLinkToFirstPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToLastPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToNextPage = PagedListDisplayMode.IfNeeded,
                DisplayLinkToPreviousPage = PagedListDisplayMode.IfNeeded,
                UlElementClasses = ["pagination", "justify-content-center"],
                LiElementClasses = ["page-item"],
                PageClasses = ["page-link"]
            })
    </div>
}

<!-- Script per gestione eventi e azioni AJAX -->
<script>
    document.addEventListener("DOMContentLoaded", function () {
        let tokenElement = document.querySelector('input[name="__RequestVerificationToken"]');
        let token = tokenElement ? tokenElement.value : "";

        function fetchRequest(url, method, successMessage, errorMessage) {
            fetch(url, {
                method: method,
                headers: {
                    "Content-Type": "application/json",
                    "RequestVerificationToken": token
                }
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    alert(successMessage);
                    location.reload();
                } else {
                    alert(data.message || errorMessage);
                }
            })
            .catch(error => alert(errorMessage + ": " + error.message));
        }

        // Nasconde eventuali pulsanti di eliminazione se ci sono interventi (esempio)
        document.querySelectorAll("tr[id^='device-row-']").forEach(row => {
            let deleteBtn = row.querySelector(".delete-btn");
            let hasInterventions = row.getAttribute("data-has-interventions") === "true";
            if (hasInterventions && deleteBtn) {
                deleteBtn.style.display = "none";
            }
        });

        // Event listener per archiviare dispositivo
        document.querySelectorAll(".archive-btn").forEach(button => {
            button.addEventListener("click", function () {
                let deviceId = this.getAttribute("data-id");
                if (!confirm("Sei sicuro di voler archiviare questo dispositivo?")) return;
                fetchRequest(`/Device/Archive/${deviceId}`, "POST", "Il dispositivo è stato archiviato con successo!", "Errore durante l'archiviazione.");
            });
        });

        // Event listener per riattivare dispositivo dismesso
        document.querySelectorAll(".restore-btn").forEach(button => {
            button.addEventListener("click", function () {
                let deviceId = this.getAttribute("data-id");
                if (!confirm("Sei sicuro di voler riattivare questo dispositivo?")) return;
                fetchRequest(`/Device/Restore/${deviceId}`, "POST", "Il dispositivo è stato riattivato con successo!", "Errore durante la riattivazione.");
            });
        });

        // Gestione modal per report: chiusura automatica dopo il click sui pulsanti
        let reportModalElement = document.getElementById("reportModal");
        if (reportModalElement) {
            let reportModal = new bootstrap.Modal(reportModalElement);
            document.querySelectorAll("#reportModal .btn, #reportModal a").forEach(button => {
                button.addEventListener("click", function () {
                    setTimeout(() => {
                        reportModal.hide();
                    }, 500);
                });
            });
        }
    });
</script>

<script>
    document.addEventListener("DOMContentLoaded", function () {
        let exportExcelBtn = document.getElementById("exportExcel");
        let exportPdfBtn = document.getElementById("exportPdf");
        function getSelectedFilter() {
            return document.querySelector("input[name='reportFilter']:checked").value;
        }
        function generateReport(format) {
            let statusFilter = getSelectedFilter();
            let baseUrl = format === "pdf" ? "/Report/GenerateDeviceListPdf" : "/Report/GenerateDeviceListExcel";
            window.location.href = `${baseUrl}?statusFilter=${statusFilter}`;
        }
        exportExcelBtn.addEventListener("click", function () {
            generateReport("excel");
        });
        exportPdfBtn.addEventListener("click", function () {
            generateReport("pdf");
        });
    });
</script>